{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","takeLatest","put","delay","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","addPostAPI","type","console","log","error"],"mappings":";;;;yBAOUA,O;;;yBAgBAC,Y;;;yBAIeC,Q;;AA3BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,QAAqE,kBAArE;;AAEA,SAASC,UAAT,GAAqB,CAEpB;;AAED,SAAUX,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMD,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAEF;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQG,UAAAA,OAAO,CAACC,GAAR;AARR;AASQ,iBAAMR,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAEH,gBADA;AAENM,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUd,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACG,gBAAD,EAAmBR,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(){\n\n}\n\nfunction* addPost(){\n    try {\n        // yield call(addPostAPI);\n        yield delay(2000);\n        yield put({\n            type: ADD_POST_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}