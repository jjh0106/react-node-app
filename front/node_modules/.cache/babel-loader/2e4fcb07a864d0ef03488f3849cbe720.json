{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signup),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignup),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { takeLatest, takeEvery, all, fork, call, put, take, delay, race, cancel, throttle, select } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user'; //////////////////////////// API 호출::Begin ////////////////////////////\n\nfunction loginAPI() {}\n\nfunction logoutAPI() {}\n\nfunction signupAPI() {} //////////////////////////// API 호출::End ////////////////////////////\n//////////////////////////// Dispatch::Begin ////////////////////////////\n\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch와 동일.\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logoutAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signup() {\n  return _regeneratorRuntime.wrap(function signup$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signupAPI);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n} //////////////////////////// Dispatch::End //////////////////////////// \n//////////////////////////// Watch::Begin ////////////////////////////\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT, logout);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP, signup);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //////////////////////////// Watch::End ////////////////////////////\n//////////////////////////// Entry ////////////////////////////\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} // take: 해당 액션이 디스패치되면 제너레이터를 next하는 이펙트(해당 액션을 기다리다가 yield를 풀어준다.)\n// 서버에 동시에 두 요청 이상이 발생했을 때, 모두 허용할 것인가(takeEvery) 아니면 마지막 것만 허용할 것인가 차이(takeLatest)  \n// call은 동기호출, fork는 비동기호출 -- API를 요청 후 응답을 받고 다음 행동을  취하기 위해서는 call로 응답을 대기한다.","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/sagas/user.js"],"names":["login","logout","signup","watchLogin","watchLogout","watchSignup","userSaga","takeLatest","takeEvery","all","fork","call","put","take","delay","race","cancel","throttle","select","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","loginAPI","logoutAPI","signupAPI","type","console","error","log","LOG_IN","LOG_OUT","SIGN_UP"],"mappings":"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","sourcesContent":["import { takeLatest, takeEvery, all, fork, call, put, take, delay, race, cancel, throttle, select } from 'redux-saga/effects';\nimport { \n    LOG_IN_REQUEST, \n    LOG_IN_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_FAILURE,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_SUCCESS,\n } from '../reducers/user';\n\n//////////////////////////// API 호출::Begin ////////////////////////////\nfunction loginAPI(){\n \n}\n\nfunction logoutAPI(){\n    \n}\n\nfunction signupAPI(){\n\n}\n//////////////////////////// API 호출::End ////////////////////////////\n\n\n\n\n//////////////////////////// Dispatch::Begin ////////////////////////////\nfunction* login(){\n    try {\n        // yield call(loginAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch와 동일.\n            type: LOG_IN_SUCCESS,\n        });\n    } catch(e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n    }\n}\n\nfunction* logout(){\n    try {\n        yield call(logoutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* signup(){\n    try {\n        yield call(signupAPI);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n//////////////////////////// Dispatch::End //////////////////////////// \n\n\n\n\n//////////////////////////// Watch::Begin ////////////////////////////\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN, login)\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOG_OUT, logout)\n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP, signup)\n}\n//////////////////////////// Watch::End ////////////////////////////\n\n\n\n\n//////////////////////////// Entry ////////////////////////////\nexport default function* userSaga(){\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n    ]);\n}\n\n// take: 해당 액션이 디스패치되면 제너레이터를 next하는 이펙트(해당 액션을 기다리다가 yield를 풀어준다.)\n// 서버에 동시에 두 요청 이상이 발생했을 때, 모두 허용할 것인가(takeEvery) 아니면 마지막 것만 허용할 것인가 차이(takeLatest)  \n// call은 동기호출, fork는 비동기호출 -- API를 요청 후 응답을 받고 다음 행동을  취하기 위해서는 call로 응답을 대기한다."]},"metadata":{},"sourceType":"module"}