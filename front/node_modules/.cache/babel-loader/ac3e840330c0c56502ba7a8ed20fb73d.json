{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data, {\n    withCredentials: true\n  });\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/post/comment', data, {\n    withCredentials: true\n  });\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              comment: action.data.comment\n            }\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction loadMainPosts() {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          _result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: _result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadMainPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/sagas/post.js"],"names":["addPost","addComment","loadMainPosts","watchAddPost","watchAddComment","watchLoadMainPosts","postSaga","axios","all","fork","takeLatest","put","delay","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","addPostAPI","data","post","withCredentials","addCommentAPI","loadMainPostsAPI","get","action","call","result","type","console","log","error","comment"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport { \n    ADD_POST_REQUEST,\n    ADD_POST_FAILURE,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_SUCCESS,\n    LOAD_MAIN_POSTS_REQUEST,\n    LOAD_MAIN_POSTS_SUCCESS,\n    LOAD_MAIN_POSTS_FAILURE,\n } from '../reducers/post';\n\nfunction addPostAPI(data){\n    return axios.post('/post', data, {\n        withCredentials: true,\n    });\n}\n\nfunction addCommentAPI(data){\n    return axios.post('/post/comment', data, {\n        withCredentials: true,\n    });\n}\n\nfunction loadMainPostsAPI(){\n    return axios.get('/posts');\n}\n\nfunction* addPost(action){\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* addComment(action){ \n    try {\n        yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                comment: action.data.comment\n            },\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* loadMainPosts(){\n    try {\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nfunction* watchLoadMainPosts(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\n}\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadMainPosts),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}