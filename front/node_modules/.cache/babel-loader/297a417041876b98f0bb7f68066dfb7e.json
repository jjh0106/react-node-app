{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data, {\n    withCredentials: true\n  });\n} // data -> action.data.content & action.data.postId\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addComment(action) {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          _result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: _result.data\n            }\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadComments(action) {\n  var _result2;\n\n  return _regeneratorRuntime.wrap(function loadComments$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          _result2 = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: _result2.data\n            }\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction loadMainPosts() {\n  var _result3;\n\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          _result3 = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: _result3.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context4.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction loadUserPosts(action) {\n  var _result4;\n\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          _result4 = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: _result4.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction loadHashtagPosts(action) {\n  var _result5;\n\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          _result5 = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: _result5.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context6.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadMainPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/sagas/post.js"],"names":["addPost","addComment","loadComments","loadMainPosts","loadUserPosts","loadHashtagPosts","watchAddPost","watchAddComment","watchLoadComments","watchLoadMainPosts","watchLoadUserPosts","watchLoadHashtagPosts","postSaga","axios","all","fork","takeLatest","put","delay","call","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","addPostAPI","data","post","withCredentials","addCommentAPI","postId","content","loadCommentsAPI","get","loadMainPostsAPI","loadUserPostsAPI","id","loadHashtagPostsAPI","tag","action","result","type","console","log","error","comment","comments"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { \n    ADD_POST_REQUEST,\n    ADD_POST_FAILURE,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_SUCCESS,\n    LOAD_MAIN_POSTS_REQUEST,\n    LOAD_MAIN_POSTS_SUCCESS,\n    LOAD_MAIN_POSTS_FAILURE,\n    LOAD_USER_POSTS_REQUEST,\n    LOAD_HASHTAG_POSTS_REQUEST,\n    LOAD_USER_POSTS_SUCCESS,\n    LOAD_USER_POSTS_FAILURE,\n    LOAD_HASHTAG_POSTS_SUCCESS,\n    LOAD_HASHTAG_POSTS_FAILURE,\n    LOAD_COMMENTS_REQUEST,\n    LOAD_COMMENTS_SUCCESS,\n    LOAD_COMMENTS_FAILURE,\n } from '../reducers/post';\n\nfunction addPostAPI(data){\n    return axios.post('/post', data, {\n        withCredentials: true,\n    });\n}\n\n// data -> action.data.content & action.data.postId\nfunction addCommentAPI(data){\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\n        withCredentials: true,\n    });\n}\n\nfunction loadCommentsAPI(postId){\n    return axios.get(`/post/${postId}/comments`);\n}\n\nfunction loadMainPostsAPI(){\n    return axios.get('/posts');\n}\n\nfunction loadUserPostsAPI(id){\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction loadHashtagPostsAPI(tag){\n    return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* addPost(action){\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* addComment(action){ \n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data\n            },\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction * loadComments(action){\n    try {\n        const result = yield call(loadCommentsAPI, action.data);\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data,\n                comments: result.data,\n            }\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* loadMainPosts(){\n    try {\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* loadUserPosts(action){\n    try {\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* loadHashtagPosts(action){\n    try {\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nfunction* watchLoadComments(){\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\nfunction* watchLoadMainPosts(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\n}\n\nfunction* watchLoadUserPosts(){\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts)\n}\n\nfunction* watchLoadHashtagPosts(){\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\n}\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadComments),\n        fork(watchLoadMainPosts),\n        fork(watchLoadUserPosts),\n        fork(watchLoadHashtagPosts),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}