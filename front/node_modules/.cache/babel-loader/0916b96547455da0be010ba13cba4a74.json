{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signup),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignup),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { takeLatest, takeEvery, all, fork, call, put, take, delay, race, cancel, throttle, select } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../reducers/user'; //////////////////////////// API 호출::Begin ////////////////////////////\n\nfunction loginAPI(data) {\n  return axios.post('/user/login/', data, {\n    withCredentials: true\n  });\n}\n\nfunction logoutAPI() {\n  return axios.post('/user/logout/', {}, {\n    withCredentials: true\n  });\n}\n\nfunction signupAPI(data) {\n  return axios.post('/user/', data);\n}\n\nfunction loadUserAPI(userId) {\n  return axios.get(userId ? \"/user/\".concat(userId) : '/user/', {\n    withCredentials: true\n  });\n} //////////////////////////// API 호출::End ////////////////////////////\n//////////////////////////// Dispatch::Begin ////////////////////////////\n\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put은 dispatch와 동일.\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logoutAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signup(action) {\n  return _regeneratorRuntime.wrap(function signup$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signupAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction loadUser(action) {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function loadUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadUserAPI, action.data);\n\n        case 3:\n          _result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_USER_SUCCESS,\n            data: _result.data,\n            me: !action.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context4.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n} //////////////////////////// Dispatch::End //////////////////////////// \n//////////////////////////// Watch::Begin ////////////////////////////\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signup);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //////////////////////////// Watch::End ////////////////////////////\n//////////////////////////// Entry ////////////////////////////\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n} // take: 해당 액션이 디스패치되면 제너레이터를 next하는 이펙트(해당 액션을 기다리다가 yield를 풀어준다.)\n// 서버에 동시에 두 요청 이상이 발생했을 때, 모두 허용할 것인가(takeEvery) 아니면 마지막 것만 허용할 것인가 차이(takeLatest)  \n// call은 동기호출, fork는 비동기호출 -- API를 요청 후 응답을 받고 다음 행동을  취하기 위해서는 call로 응답을 대기한다.","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/sagas/user.js"],"names":["login","logout","signup","loadUser","watchLogin","watchLogout","watchSignup","watchLoadUser","userSaga","axios","takeLatest","takeEvery","all","fork","call","put","take","delay","race","cancel","throttle","select","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","loginAPI","data","post","withCredentials","logoutAPI","signupAPI","loadUserAPI","userId","get","action","result","type","console","error","log","me"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { takeLatest, takeEvery, all, fork, call, put, take, delay, race, cancel, throttle, select } from 'redux-saga/effects';\nimport { \n    LOG_IN_REQUEST, \n    LOG_IN_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_FAILURE,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_SUCCESS,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAILURE,\n    LOAD_USER_REQUEST,\n } from '../reducers/user';\n\n//////////////////////////// API 호출::Begin ////////////////////////////\nfunction loginAPI(data){\n    return axios.post('/user/login/', data, {\n        withCredentials: true,\n    });\n}\n\nfunction logoutAPI(){\n    return axios.post('/user/logout/', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction signupAPI(data){\n    return axios.post('/user/', data);\n}\n\nfunction loadUserAPI(userId){\n    return axios.get( userId ? `/user/${userId}` : '/user/', {\n        withCredentials: true,\n    });\n}\n//////////////////////////// API 호출::End ////////////////////////////\n\n\n\n\n//////////////////////////// Dispatch::Begin ////////////////////////////\nfunction* login(action){\n    try {\n        const result = yield call(loginAPI, action.data);\n        yield put({ // put은 dispatch와 동일.\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n    }\n}\n\nfunction* logout(){\n    try {\n        yield call(logoutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* signup(action){ \n    try {\n        yield call(signupAPI, action.data); // action.data에는 컴포넌트에서 디스패치한 userId, password, nickname가 들어있다.\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* loadUser(action){ \n    try {\n        const result = yield call(loadUserAPI, action.data); \n        yield put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data,\n        });\n    } catch(e) {\n        console.error(e);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n//////////////////////////// Dispatch::End //////////////////////////// \n\n\n\n\n//////////////////////////// Watch::Begin ////////////////////////////\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOG_OUT_REQUEST, logout)\n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP_REQUEST, signup)\n}\n\nfunction* watchLoadUser(){\n    yield takeEvery(LOAD_USER_REQUEST, loadUser)\n}\n//////////////////////////// Watch::End ////////////////////////////\n\n\n\n\n//////////////////////////// Entry ////////////////////////////\nexport default function* userSaga(){\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n        fork(watchLoadUser),\n    ]);\n}\n\n// take: 해당 액션이 디스패치되면 제너레이터를 next하는 이펙트(해당 액션을 기다리다가 yield를 풀어준다.)\n// 서버에 동시에 두 요청 이상이 발생했을 때, 모두 허용할 것인가(takeEvery) 아니면 마지막 것만 허용할 것인가 차이(takeLatest)  \n// call은 동기호출, fork는 비동기호출 -- API를 요청 후 응답을 받고 다음 행동을  취하기 위해서는 call로 응답을 대기한다."]},"metadata":{},"sourceType":"module"}