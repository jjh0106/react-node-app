{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, List, Form, Input, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('댓글 입력을 위해서는 로그인을 해주세요.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  var onChangeCommentText = useCallback(function (e) {\n    var value = e.target.value;\n    setCommentText(value);\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  return React.createElement(\"div\", null, React.createElement(Card, {\n    key: +post.createdAt,\n    cover: post.Images[0] && React.createElement(PostImages, {\n      images: post.Images\n    }),\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), React.createElement(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: React.createElement(Button, null, \"Follow\")\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, React.createElement(\"a\", null, React.createElement(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: React.createElement(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return React.createElement(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          key: v,\n          as: \"/hashtag/\".concat(v.slice(1))\n        }, React.createElement(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: onSubmitComment\n  }, React.createElement(Form.Item, null, React.createElement(Input.TextArea, {\n    row: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), React.createElement(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", null, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, React.createElement(\"a\", null, React.createElement(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string // createdAt: PropTypes.object,\n\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Link","Card","Icon","Button","Avatar","List","Form","Input","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","PostImages","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","content","onChangeCommentText","value","target","onToggleComment","prev","createdAt","Images","pathname","query","User","nickname","split","map","v","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, List, Form, Input, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\n\nconst PostCard = ({ post }) => {\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\n    const [commentText, setCommentText] = useState(''); \n    const { me } = useSelector(state => state.user);\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\n    const dispatch = useDispatch();\n\n    const onSubmitComment = useCallback((e) => {\n        e.preventDefault();\n        if( !me ){\n            return alert('댓글 입력을 위해서는 로그인을 해주세요.');\n        }\n        return dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                postId: post.id,\n                content: commentText,\n            }\n        })\n    }, [me && me.id, commentText]);\n\n    const onChangeCommentText = useCallback((e) => {\n        const { value } = e.target;\n        setCommentText(value);\n    }, []);\n\n    const onToggleComment = useCallback(() => {\n        setCommentFormOpened(prev => !prev);\n        if( !commentFormOpened ){\n            dispatch({\n                type: LOAD_COMMENTS_REQUEST,\n                data: post.id,\n            })\n        }\n    }, []);\n\n    useEffect(() => {\n        setCommentText('');\n    }, [commentAdded === true])\n\n    return (\n        <div>\n            <Card\n            key={+post.createdAt}\n            cover={post.Images[0] && <PostImages images={post.Images} />}\n            actions={[\n                <Icon type=\"retweet\" key=\"retweet\" />,\n                <Icon type=\"heart\" key=\"heart\" />,\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />,\n            ]}\n            extra={<Button>Follow</Button>}\n            >\n                <Card.Meta \n                    avatar={(\n                        <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\n                            <a>\n                                <Avatar>{post.User.nickname[0]}</Avatar>\n                            </a>\n                        </Link>\n                    )}\n                    title={post.User.nickname}\n                    description={(\n                        <div>\n                            {post.content.split(/(#[^\\s]+)/g).map((v) => {\n                                if( v.match(/#[^\\s]+/) ){\n                                    return (\n                                        <Link href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }} key={v} as={`/hashtag/${v.slice(1)}`}>\n                                            <a>{v}</a>\n                                        </Link>\n                                    );\n                                }\n                                return v;\n                            })}\n                        </div>\n                    )}\n                />\n            </Card>\n            {commentFormOpened && (\n            <>\n                <Form onSubmit={onSubmitComment}>\n                    <Form.Item>\n                        <Input.TextArea row={4} value={commentText} onChange={onChangeCommentText} />\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n                </Form>\n                <List \n                    header={`${post.Comments ? post.Comments.length : 0}개의 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment \n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                        <a>\n                                            <Avatar>{item.User.nickname[0]}</Avatar>\n                                        </a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                        </li>\n                    )}\n                />\n            </>\n            )}\n        </div>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        // createdAt: PropTypes.object,\n    }),\n};\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}