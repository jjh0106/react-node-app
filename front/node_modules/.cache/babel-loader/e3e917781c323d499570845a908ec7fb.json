{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user'; //////////////////////////////////////////// add post ////////////////////////////////////////////\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //////////////////////////////////////////// add comment ////////////////////////////////////////////\n// data -> action.data.content & action.data.postId\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          _result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: _result.data\n            }\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //////////////////////////////////////////// load comment ////////////////////////////////////////////\n\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var _result2;\n\n  return _regeneratorRuntime.wrap(function loadComments$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          _result2 = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: _result2.data\n            }\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //////////////////////////////////////////// load main posts ////////////////////////////////////////////\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadMainPosts() {\n  var _result3;\n\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          _result3 = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: _result3.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.log(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //////////////////////////////////////////// load user posts ////////////////////////////////////////////\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var _result4;\n\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          _result4 = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: _result4.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.log(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} //////////////////////////////////////////// load hashtag posts ////////////////////////////////////////////\n\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag)));\n}\n\nfunction loadHashtagPosts(action) {\n  var _result5;\n\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          _result5 = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: _result5.data\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.log(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} //////////////////////////////////////////// upload images ////////////////////////////////////////////\n\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var _result6;\n\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          _result6 = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: _result6.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.log(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} //////////////////////////////////////////// like post ////////////////////////////////////////////\n\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var _result7;\n\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          _result7 = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: _result7.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.log(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n} //////////////////////////////////////////// unlike post ////////////////////////////////////////////\n\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var _result8;\n\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          _result8 = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: _result8.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.log(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n} //////////////////////////////////////////// retweet ////////////////////////////////////////////\n\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var _result9;\n\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          _result9 = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: _result9.data\n          });\n\n        case 6:\n          _context19.next = 13;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.log(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadMainPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadComments","watchLoadComments","loadMainPosts","watchLoadMainPosts","loadUserPosts","watchLoadUserPosts","loadHashtagPosts","watchLoadHashtagPosts","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","postSaga","axios","all","fork","takeLatest","put","delay","call","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","withCredentials","action","result","type","id","console","log","error","addCommentAPI","postId","content","comment","loadCommentsAPI","get","comments","loadMainPostsAPI","loadUserPostsAPI","loadHashtagPostsAPI","tag","encodeURIComponent","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","delete","retweetAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { \n    ADD_POST_REQUEST,\n    ADD_POST_FAILURE,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_SUCCESS,\n    LOAD_MAIN_POSTS_REQUEST,\n    LOAD_MAIN_POSTS_SUCCESS,\n    LOAD_MAIN_POSTS_FAILURE,\n    LOAD_USER_POSTS_REQUEST,\n    LOAD_HASHTAG_POSTS_REQUEST,\n    LOAD_USER_POSTS_SUCCESS,\n    LOAD_USER_POSTS_FAILURE,\n    LOAD_HASHTAG_POSTS_SUCCESS,\n    LOAD_HASHTAG_POSTS_FAILURE,\n    LOAD_COMMENTS_REQUEST,\n    LOAD_COMMENTS_SUCCESS,\n    LOAD_COMMENTS_FAILURE,\n    UPLOAD_IMAGES_REQUEST,\n    UPLOAD_IMAGES_SUCCESS,\n    UPLOAD_IMAGES_FAILURE,\n    LIKE_POST_REQUEST,\n    LIKE_POST_SUCCESS,\n    LIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST,\n    UNLIKE_POST_FAILURE,\n    UNLIKE_POST_SUCCESS,\n    RETWEET_REQUEST,\n    RETWEET_SUCCESS,\n    RETWEET_FAILURE,\n } from '../reducers/post';\n\n import { ADD_POST_TO_ME } from '../reducers/user';\n\n//////////////////////////////////////////// add post ////////////////////////////////////////////\nfunction addPostAPI(data){\n    return axios.post('/post', data, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action){\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\n//////////////////////////////////////////// add comment ////////////////////////////////////////////\n// data -> action.data.content & action.data.postId\nfunction addCommentAPI(data){\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action){ \n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data\n            },\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\n\n//////////////////////////////////////////// load comment ////////////////////////////////////////////\nfunction loadCommentsAPI(postId){\n    return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action){\n    try {\n        const result = yield call(loadCommentsAPI, action.data);\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data,\n                comments: result.data,\n            }\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadComments(){\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\n//////////////////////////////////////////// load main posts ////////////////////////////////////////////\nfunction loadMainPostsAPI(){\n    return axios.get('/posts');\n}\n\nfunction* loadMainPosts(){\n    try {\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadMainPosts(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\n}\n\n//////////////////////////////////////////// load user posts ////////////////////////////////////////////\nfunction loadUserPostsAPI(id){\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action){\n    try {\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUserPosts(){\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts)\n}\n\n//////////////////////////////////////////// load hashtag posts ////////////////////////////////////////////\nfunction loadHashtagPostsAPI(tag){\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}`);\n}\n\nfunction* loadHashtagPosts(action){\n    try {\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadHashtagPosts(){\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\n}\n\n//////////////////////////////////////////// upload images ////////////////////////////////////////////\nfunction uploadImagesAPI(formData){\n    return axios.post('/post/images', formData, {\n        withCredentials: true,\n    });\n}\n\nfunction* uploadImages(action){\n    try {\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchUploadImages(){\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\n}\n\n//////////////////////////////////////////// like post ////////////////////////////////////////////\nfunction likePostAPI(postId){\n    return axios.post(`/post/${postId}/like`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* likePost(action){\n    try {\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId,\n            },\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLikePost(){\n    yield takeLatest(LIKE_POST_REQUEST, likePost)\n}\n\n//////////////////////////////////////////// unlike post ////////////////////////////////////////////\nfunction unlikePostAPI(postId){\n    return axios.delete(`/post/${postId}/like`, {\n        withCredentials: true,\n    });\n}\n\nfunction* unlikePost(action){\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId,\n            },\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchUnlikePost(){\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost)\n}\n\n//////////////////////////////////////////// retweet ////////////////////////////////////////////\nfunction retweetAPI(postId){\n    return axios.post(`/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* retweet(action){\n    try {\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchRetweet(){\n    yield takeLatest(RETWEET_REQUEST, retweet)\n}\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadComments),\n        fork(watchLoadMainPosts),\n        fork(watchLoadUserPosts),\n        fork(watchLoadHashtagPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}