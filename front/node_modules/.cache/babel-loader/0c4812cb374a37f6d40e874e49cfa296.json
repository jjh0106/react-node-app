{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  useEffect(function () {\n    setText('');\n  }, [postAdded === true]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요.');\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text\n      }\n    });\n  }, [text]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImage = useCallback(function (e) {\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  }, []);\n  return React.createElement(Form, {\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm\n  }, React.createElement(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC77C\\uC0C1\\uC744 \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n    value: text,\n    onChange: onChangeText\n  }), React.createElement(\"div\", null, React.createElement(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImage\n  }), React.createElement(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\")), React.createElement(\"div\", null, imagePaths.map(function (v, i) {\n    // <Thumbnail path={v} />\n    return React.createElement(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      }\n    }, React.createElement(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: '200px'\n      },\n      alt: v\n    }), React.createElement(\"div\", null, React.createElement(Button, {\n      onClick: onRemoveImage(i)\n    }, \"\\uC81C\\uAC70\")));\n  })));\n}; // const Thumbnail = ({ path }) => {\n//     return (\n//         <div key={path} style={{ display: 'inline-block' }}>\n//             <img src={`http://localhost:3000/${path}`} style={{ width: '200px' }} alt={path} />\n//             <div>\n//                 <Button>제거</Button>\n//             </div>\n//         </div>\n//     );\n// };\n\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/jsn/Desktop/react-node-app/front/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onSubmitForm","e","preventDefault","trim","alert","type","data","content","onChangeText","target","value","onClickImageUpload","current","click","onChangeImage","imageFormData","FormData","forEach","call","files","f","append","onRemoveImage","index","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nconst PostForm = () => {\n    const dispatch = useDispatch();\n    const [text, setText] = useState('');\n    const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\n    const imageInput = useRef();\n\n    useEffect(() => {\n        setText('');\n    }, [postAdded === true])\n\n    const onSubmitForm = useCallback((e) => {\n        e.preventDefault();\n        if(!text || !text.trim()){\n            return alert('게시글을 작성해주세요.');\n        }\n        dispatch({\n            type: ADD_POST_REQUEST,\n            data: {\n                content: text,\n            }\n        });\n    }, [text]);\n\n    const onChangeText = useCallback((e) => {\n        setText(e.target.value);\n    }, [])\n\n    const onClickImageUpload = useCallback(() => {\n        imageInput.current.click();\n    }, [imageInput.current]);\n\n    const onChangeImage = useCallback((e) => {\n        const imageFormData = new FormData();\n        [].forEach.call(e.target.files, (f) => {\n            imageFormData.append('image', f);\n        })\n        dispatch({\n            type: UPLOAD_IMAGES_REQUEST,\n            data: imageFormData,\n        })\n    }, []);\n\n    const onRemoveImage = useCallback((index) => () => {\n        dispatch({\n            type: REMOVE_IMAGE,\n            index,\n        })\n    }, []);\n\n    return (\n        <Form encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\n            <Input.TextArea maxLength={140} placeholder=\"일상을 적어주세요.\" value={text} onChange={onChangeText} />\n            <div>\n                <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImage} />\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n                <Button type=\"primary\" htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\n            </div>\n            <div>\n                {imagePaths.map((v, i) => {\n                    // <Thumbnail path={v} />\n                    return (\n                        <div key={v} style={{ display: 'inline-block' }}>\n                            <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\n                            <div>\n                                <Button onClick={onRemoveImage(i)}>제거</Button>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </Form>\n    );\n};\n\n// const Thumbnail = ({ path }) => {\n//     return (\n//         <div key={path} style={{ display: 'inline-block' }}>\n//             <img src={`http://localhost:3000/${path}`} style={{ width: '200px' }} alt={path} />\n//             <div>\n//                 <Button>제거</Button>\n//             </div>\n//         </div>\n//     );\n// };\n\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}