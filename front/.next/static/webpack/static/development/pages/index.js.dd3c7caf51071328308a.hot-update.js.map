{"version":3,"file":"static/webpack/static/development/pages/index.js.dd3c7caf51071328308a.hot-update.js","sources":["webpack:///./components/PostCard.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, List, Form, Input, Comment, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\n\nconst PostCard = ({ post }) => {\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\n    const [commentText, setCommentText] = useState(''); \n    const { me } = useSelector(state => state.user);\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\n    const dispatch = useDispatch();\n\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n\n    const onSubmitComment = useCallback((e) => {\n        e.preventDefault();\n        if( !me ){\n            return alert('댓글 입력을 위해서는 로그인을 해주세요.');\n        }\n        return dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                postId: post.id,\n                content: commentText,\n            }\n        })\n    }, [me && me.id, commentText]);\n\n    const onChangeCommentText = useCallback((e) => {\n        const { value } = e.target;\n        setCommentText(value);\n    }, []);\n\n    const onToggleComment = useCallback(() => {\n        setCommentFormOpened(prev => !prev);\n        if( !commentFormOpened ){\n            dispatch({\n                type: LOAD_COMMENTS_REQUEST,\n                data: post.id,\n            })\n        }\n    }, []);\n\n    const onToggleLike = useCallback(() => {\n        if( !me ){\n            return alert('로그인이 필요합니다.');\n        }\n\n        if( liked ){ // 좋아요 누른 상태\n            dispatch({\n                type: UNLIKE_POST_REQUEST,\n                data: post.id,\n            })\n        } else { // 좋아요 안 누른 상태\n            dispatch({\n                type: LIKE_POST_REQUEST,\n                data: post.id,\n            })\n        }\n    }, [me && me.id, post && post.id, liked]);\n\n    const onRetweet = useCallback(() => {\n        if( !me ){\n            return alert('로그인이 필요합니다.');\n        }\n        dispatch({\n            type: RETWEET_REQUEST,\n            data: post.id,\n        })\n    }, [me && me.id, post.id]);\n\n    const onFollow = useCallback(userId => () => {\n        dispatch({\n            type: FOLLOW_USER_REQUEST,\n            data: userId,\n        })\n    }, []);\n\n    const onUnfollow = useCallback(userId => () => {\n        dispatch({\n            type: UNFOLLOW_USER_REQUEST,\n            data: userId,\n        })\n    }, []);\n\n    useEffect(() => {\n        setCommentText('');\n    }, [commentAdded === true])\n\n    return (\n        <div>\n            <Card\n                key={+post.createdAt}\n                cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n                actions={[\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n                    <Icon type=\"heart\" key=\"heart\" theme={ liked ? \"twoTone\" : \"outlined\" } twoToneColor=\"#eb2f96\" onClick={onToggleLike} />,\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n                    <Popover\n                        key=\"ellipsis\"\n                        content={(\n                            <Button.Group>\n                                {me && post.UserId === me.id\n                                    ? (\n                                        <>\n                                            <Button>수정</Button>\n                                            <Button type=\"danger\">삭제</Button>\n                                        </>\n                                    )\n                                    : <Button>신고</Button>\n                                }\n                            </Button.Group>\n                        )}\n                    >\n                        <Icon type=\"ellipsis\" />\n                    </Popover>,\n                ]}\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null}\n                extra={ !me || post.User.id === me.id\n                    ? null\n                    : me.Followings && me.Followings.find(v => v.id === post.User.id)\n                        ? <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button>\n                        : <Button onClick={onFollow(post.User.id)}>팔로우</Button>\n                }\n            >\n                { post.RetweetId && post.Retweet \n                ?   <Card\n                        cover={ post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} /> }\n                    >\n                        <Card.Meta \n                            avatar={(\n                                <Link href={{ pathname: '/user', query: { id: post.Retweet.User.id } }} as={`/user/${post.Retweet.User.id}`}>\n                                    <a>\n                                        <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\n                                    </a>\n                                </Link>\n                            )}\n                            title={post.Retweet.User.nickname}\n                            description={ <PostCardContent postData={post.Retweet.content}/> }\n                        />\n                    </Card>\n                :   (<Card.Meta \n                        avatar={(\n                            <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\n                                <a>\n                                    <Avatar>{post.User.nickname[0]}</Avatar>\n                                </a>\n                            </Link>\n                        )}\n                        title={post.User.nickname}\n                        description={ <PostCardContent postData={post.content}/> }\n                    />\n                )}\n            </Card>\n            {commentFormOpened && (\n            <>\n                <Form onSubmit={onSubmitComment}>\n                    <Form.Item>\n                        <Input.TextArea row={4} value={commentText} onChange={onChangeCommentText} />\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n                </Form>\n                <List \n                    header={`${post.Comments ? post.Comments.length : 0}개의 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment \n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                        <a>\n                                            <Avatar>{item.User.nickname[0]}</Avatar>\n                                        </a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                        </li>\n                    )}\n                />\n            </>\n            )}\n        </div>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        // createdAt: PropTypes.object,\n    }).isRequired,\n};\n\nexport default PostCard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AADA;AAIA;AAAA;AAJA;AAAA;AACA;AAIA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAMA;AAAA;AARA;AAgBA;AAAA;AAGA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AA/BA;AAoCA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AATA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AATA;AAeA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AATA;AAFA;AAJA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;A","sourceRoot":""}