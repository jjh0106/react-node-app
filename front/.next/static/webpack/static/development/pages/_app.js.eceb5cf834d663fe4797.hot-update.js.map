{"version":3,"file":"static/webpack/static/development/pages/_app.js.eceb5cf834d663fe4797.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { takeLatest, takeEvery, all, fork, call, put, take, delay, race, cancel, throttle, select } from 'redux-saga/effects';\nimport { \n    LOG_IN_REQUEST, \n    LOG_IN_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_FAILURE,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_SUCCESS,\n } from '../reducers/user';\n\n//////////////////////////// API 호출::Begin ////////////////////////////\nfunction loginAPI(){\n \n}\n\nfunction logoutAPI(){\n    \n}\n\nfunction signupAPI(){\n\n}\n//////////////////////////// API 호출::End ////////////////////////////\n\n\n\n\n//////////////////////////// Dispatch::Begin ////////////////////////////\nfunction* login(){\n    try {\n        // yield call(loginAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch와 동일.\n            type: LOG_IN_SUCCESS,\n        });\n    } catch(e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n    }\n}\n\nfunction* logout(){\n    try {\n        yield call(logoutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* signup(){\n    try {\n        yield call(signupAPI);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n//////////////////////////// Dispatch::End //////////////////////////// \n\n\n\n\n//////////////////////////// Watch::Begin ////////////////////////////\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN, login)\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOG_OUT, logout)\n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP, signup)\n}\n//////////////////////////// Watch::End ////////////////////////////\n\n\n\n\n//////////////////////////// Entry ////////////////////////////\nexport default function* userSaga(){\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n    ]);\n}\n\n// take: 해당 액션이 디스패치되면 제너레이터를 next하는 이펙트(해당 액션을 기다리다가 yield를 풀어준다.)\n// 서버에 동시에 두 요청 이상이 발생했을 때, 모두 허용할 것인가(takeEvery) 아니면 마지막 것만 허용할 것인가 차이(takeLatest)  \n// call은 동기호출, fork는 비동기호출 -- API를 요청 후 응답을 받고 다음 행동을  취하기 위해서는 call로 응답을 대기한다."],"mappings":";;;;;;;;;;;;;;;;;;;;AA+BA;;;AAeA;;;AAcA;;;AAmBA;;;AAIA;;;AAIA;;;AASA;AACA;AAjGA;AACA;AACA;AAYA;AACA;AAGA;AACA;AAGA;AAQA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAIA;AAAA;AACA;AADA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AASA;AACA;AADA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAPA;AAQA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAPA;AAQA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;;;;A","sourceRoot":""}