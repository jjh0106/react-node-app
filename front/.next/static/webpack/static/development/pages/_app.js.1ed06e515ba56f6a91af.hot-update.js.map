{"version":3,"file":"static/webpack/static/development/pages/_app.js.1ed06e515ba56f6a91af.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import axios from 'axios';\nimport { takeLatest, takeEvery, all, fork, call, put, take, delay, race, cancel, throttle, select } from 'redux-saga/effects';\nimport { \n    LOG_IN_REQUEST, \n    LOG_IN_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_FAILURE,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_REQUEST,\n    SIGN_UP_FAILURE,\n    SIGN_UP_SUCCESS,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAILURE,\n    LOAD_USER_REQUEST,\n } from '../reducers/user';\n\n//////////////////////////// API 호출::Begin ////////////////////////////\nfunction loginAPI(data){\n    return axios.post('/user/login/', data, {\n        withCredentials: true,\n    });\n}\n\nfunction logoutAPI(){\n    return axios.post('/user/logout/', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction signupAPI(data){\n    return axios.post('/user/', data);\n}\n\nfunction loadUserAPI(userId){\n    return axios.get( userId ? `/user/${userId}` : '/user/', {\n        withCredentials: true,\n    });\n}\n//////////////////////////// API 호출::End ////////////////////////////\n\n\n\n\n//////////////////////////// Dispatch::Begin ////////////////////////////\nfunction* login(action){\n    try {\n        const result = yield call(loginAPI, action.data);\n        yield put({ // put은 dispatch와 동일.\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch(e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n    }\n}\n\nfunction* logout(){\n    try {\n        yield call(logoutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* signup(action){ \n    try {\n        yield call(signupAPI, action.data); // action.data에는 컴포넌트에서 디스패치한 userId, password, nickname가 들어있다.\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* loadUser(action){ \n    try {\n        const result = yield call(loadUserAPI, action.data); \n        yield put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data,\n        });\n    } catch(e) {\n        console.log(e);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n//////////////////////////// Dispatch::End //////////////////////////// \n\n\n\n\n//////////////////////////// Watch::Begin ////////////////////////////\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOG_OUT_REQUEST, logout)\n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP_REQUEST, signup)\n}\n\nfunction* watchLoadUser(){\n    yield takeLatest(LOAD_USER_REQUEST, loadUser)\n}\n//////////////////////////// Watch::End ////////////////////////////\n\n\n\n\n//////////////////////////// Entry ////////////////////////////\nexport default function* userSaga(){\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n        fork(watchLoadUser),\n    ]);\n}\n\n// take: 해당 액션이 디스패치되면 제너레이터를 next하는 이펙트(해당 액션을 기다리다가 yield를 풀어준다.)\n// 서버에 동시에 두 요청 이상이 발생했을 때, 모두 허용할 것인가(takeEvery) 아니면 마지막 것만 허용할 것인가 차이(takeLatest)  \n// call은 동기호출, fork는 비동기호출 -- API를 요청 후 응답을 받고 다음 행동을  취하기 위해서는 call로 응답을 대기한다."],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA6CA;;;AAeA;;;AAcA;;;AAeA;;;AAsBA;;;AAIA;;;AAIA;;;AAIA;;;AASA;AACA;AArIA;AACA;AACA;AACA;AAeA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAMA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AAAA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AASA;AACA;AADA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAPA;AAQA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAPA;AAQA;AACA;AACA;AAFA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AATA;AAUA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;A","sourceRoot":""}